<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	   xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
      http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop.xsd">

	<bean id="appDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		init-method="init" destroy-method="close">
		<!-- 基本属性 url、user、password -->
		<property name="url" value="${app.jdbc.url}" />
		<property name="username" value="${app.jdbc.user}" />
		<property name="password" value="${app.jdbc.password}" />

		<!-- 配置初始化大小、最小、最大 -->
		<property name="initialSize" value="${app.dataSource.initialSize}" />
		<property name="minIdle" value="${app.dataSource.maxIdle}" />
		<property name="maxActive" value="${app.dataSource.maxActive}" />

		<!-- 配置获取连接等待超时的时间 -->
		<property name="maxWait" value="${app.dataSource.maxWait}" />

		<!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
		<property name="timeBetweenEvictionRunsMillis"
			value="${app.datasource.timeBetweenEvictionRunsMillis}" />

		<!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
		<property name="minEvictableIdleTimeMillis" value="${app.datasource.minEvictableIdleTimeMillis}" />

		<property name="validationQuery" value="${app.datasource.validationQuery}" />
		<property name="testWhileIdle" value="${app.dataSource.testWhileIdle:true}" />
		<property name="testOnBorrow" value="${app.dataSource.testOnBorrow:false}" />
		<property name="testOnReturn" value="${app.dataSource.testOnReturn:false}" />

		<!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
		<property name="poolPreparedStatements"
			value="${app.dataSource.poolPreparedStatements:false}" />
		<property name="maxPoolPreparedStatementPerConnectionSize"
			value="20" />

		<!-- 配置监控统计拦截的filters -->
		<property name="filters" value="stat" />
	</bean>


    <!-- 扫描basePackage下所有以@MyBatisDao注解的接口 -->
    <bean id="mapperScannerConfigurer" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="sqlSessionFactoryBeanName" value="appSessionFactory" />
        <property name="basePackage" value="com.sky.ico.service.data.dao;com.sky.framework.task.dao" />
    </bean>

    <!-- 开启注解事务支持 -->
    <tx:annotation-driven transaction-manager="appTransactionManager" proxy-target-class="true" />
	<bean id="appTransactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="appDataSource" />
	</bean>

	<!-- define the SqlSessionFactory -->
	<bean id="appSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="appDataSource" />
		<property name="configLocation" value="classpath:/mybatis/mybatis-config.xml" />
		<property name="mapperLocations">
			<list>
				<value>classpath*:mybatis/mapper/*.xml</value>
			</list>
		</property>
	</bean>

	<!-- Transaction setting -->
	<aop:config>
		<aop:pointcut id="txAdvicePointCut"
					  expression="execution(* com.sky.ico.service.service.*Service.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txAdvicePointCut" />
	</aop:config>

	<aop:config>
		<aop:pointcut id="txAdvicePointCutTask"
					  expression="execution(* com.sky.ico.service.task.*Task.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txAdvicePointCutTask" />
	</aop:config>

	<aop:config>
		<aop:pointcut id="txAdvicePointCutChildTask"
					  expression="execution(* com.sky.ico.service.task.child.*ChildTask.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txAdvicePointCutChildTask" />
	</aop:config>

	<aop:config>
		<aop:pointcut id="txAdvicePointCutEmail"
					  expression="execution(* com.sky.ico.executor.email.EmailSendHandler.*(..))" />
		<aop:advisor advice-ref="txAdvice" pointcut-ref="txAdvicePointCutEmail" />
	</aop:config>

	<tx:advice id="txAdvice" transaction-manager="appTransactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRED" />
		</tx:attributes>
	</tx:advice>

	<!-- 独立事务(事务隔离) -->
	<aop:config>
		<aop:pointcut id="txAdvicePointCutIT"
					  expression="execution(* com.sky.ico.service.service.*IndependentService.*(..))" />
		<aop:advisor advice-ref="txAdviceIT" pointcut-ref="txAdvicePointCutIT" />
	</aop:config>

	<tx:advice id="txAdviceIT" transaction-manager="appTransactionManager">
		<tx:attributes>
			<tx:method name="*" propagation="REQUIRES_NEW" />
		</tx:attributes>
	</tx:advice>

</beans>

